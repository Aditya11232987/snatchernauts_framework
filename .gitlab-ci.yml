stages:
  - validate
  - test
  - build
  - deploy

variables:
  RENPY_VERSION: "8.3.7"

# Validate Ren'Py syntax and structure
validate_syntax:
  stage: validate
  image: python:3.11
  script:
    - echo "Validating Ren'Py project structure..."
    - python -c "import os; assert os.path.exists('game'), 'game directory not found'"
    - python -c "import os; assert os.path.exists('game/script.rpy'), 'script.rpy not found'"
    - python -c "import os; assert os.path.exists('game/options.rpy'), 'options.rpy not found'"
    - echo "✓ Basic project structure validated"
    
    # Check for required framework files
    - python -c "import os; assert os.path.exists('game/room_main.rpy'), 'room_main.rpy not found'"
    - python -c "import os; assert os.path.exists('game/room_config.rpy'), 'room_config.rpy not found'"
    - echo "✓ Framework files validated"
    
    # Check for assets
    - python -c "import os; assert os.path.exists('game/fonts/quaver.ttf'), 'Quaver font not found'"
    - python -c "import os; assert os.path.exists('game/images/room1.png'), 'Room background not found'"
    - echo "✓ Required assets validated"
  only:
    - merge_requests
    - main
    - tags

# Run basic tests
test_framework:
  stage: test
  image: python:3.11
  script:
    - echo "Running framework tests..."
    - python -c "
import re
import os

# Test that all .rpy files have valid Python syntax in init blocks
print('Testing Python syntax in .rpy files...')
rpy_files = []
for root, dirs, files in os.walk('game'):
    for file in files:
        if file.endswith('.rpy'):
            rpy_files.append(os.path.join(root, file))

for rpy_file in rpy_files:
    with open(rpy_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Extract Python code blocks
    python_blocks = re.findall(r'init python:(.*?)(?=^[a-zA-Z]|\Z)', content, re.MULTILINE | re.DOTALL)
    
    for i, block in enumerate(python_blocks):
        try:
            compile(block, f'{rpy_file}:python_block_{i}', 'exec')
        except SyntaxError as e:
            print(f'Syntax error in {rpy_file}: {e}')
            exit(1)

print('✓ All Python blocks have valid syntax')
"
  only:
    - merge_requests
    - main
    - tags

# Build documentation
build_docs:
  stage: build
  image: python:3.11
  script:
    - pip install mkdocs mkdocs-material
    - echo "Building documentation..."
    # For now, just validate markdown files exist
    - test -f README.md
    - test -f CONTRIBUTING.md
    - test -f CHANGELOG.md
    - test -f wiki/Home.md
    - echo "✓ Documentation files validated"
  artifacts:
    paths:
      - README.md
      - CONTRIBUTING.md
      - CHANGELOG.md
      - wiki/
    expire_in: 1 week
  only:
    - main
    - tags

# Create release package
create_release:
  stage: build
  image: alpine:latest
  before_script:
    - apk add --no-cache zip tar
  script:
    - echo "Creating release package..."
    - mkdir -p dist
    
    # Create ZIP archive
    - zip -r "dist/snatchernauts_framework_${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}.zip" . -x "*.git*" "dist/*" ".gitlab-ci.yml"
    
    # Create TAR.GZ archive  
    - tar -czf "dist/snatchernauts_framework_${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}}.tar.gz" --exclude='.git*' --exclude='dist' --exclude='.gitlab-ci.yml' .
    
    - ls -la dist/
    - echo "✓ Release packages created"
  artifacts:
    paths:
      - dist/
    expire_in: 1 month
  only:
    - tags

# Deploy to GitLab Pages (documentation)
pages:
  stage: deploy
  image: python:3.11
  script:
    - pip install mkdocs mkdocs-material
    - mkdir -p public
    - cp README.md public/
    - cp -r wiki/ public/wiki/
    - echo "✓ Documentation deployed to GitLab Pages"
  artifacts:
    paths:
      - public
  only:
    - main

# Security scan
security_scan:
  stage: validate
  image: python:3.11
  script:
    - echo "Running security checks..."
    - python -c "
import os
import re

# Check for potential security issues
print('Scanning for potential security issues...')

security_patterns = [
    (r'eval\s*\(', 'eval() usage detected'),
    (r'exec\s*\(', 'exec() usage detected'),
    (r'__import__\s*\(', '__import__() usage detected'),
    (r'os\.system\s*\(', 'os.system() usage detected'),
    (r'subprocess\.|popen', 'subprocess usage detected')
]

issues_found = False
for root, dirs, files in os.walk('game'):
    for file in files:
        if file.endswith('.rpy'):
            filepath = os.path.join(root, file)
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            for pattern, message in security_patterns:
                if re.search(pattern, content, re.IGNORECASE):
                    print(f'WARNING: {message} in {filepath}')
                    # Note: Not failing the pipeline for these, just warning

print('✓ Security scan completed')
"
  only:
    - merge_requests
    - main
    - tags
  allow_failure: true
